// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `R2Comm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __C__Users_vision_Desktop_CornellCup2015_R2Bot_BotComm_R2Comm_h__
#define __C__Users_vision_Desktop_CornellCup2015_R2Bot_BotComm_R2Comm_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace R2D2
{

class BotToBase;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::R2D2::BotToBase>&);
::IceProxy::Ice::Object* upCast(::IceProxy::R2D2::BotToBase*);

class BaseToBot;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::R2D2::BaseToBot>&);
::IceProxy::Ice::Object* upCast(::IceProxy::R2D2::BaseToBot*);

}

}

namespace R2D2
{

class BotToBase;
bool operator==(const BotToBase&, const BotToBase&);
bool operator<(const BotToBase&, const BotToBase&);
::Ice::Object* upCast(::R2D2::BotToBase*);
typedef ::IceInternal::Handle< ::R2D2::BotToBase> BotToBasePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::R2D2::BotToBase> BotToBasePrx;
void __patch(BotToBasePtr&, const ::Ice::ObjectPtr&);

class BaseToBot;
bool operator==(const BaseToBot&, const BaseToBot&);
bool operator<(const BaseToBot&, const BaseToBot&);
::Ice::Object* upCast(::R2D2::BaseToBot*);
typedef ::IceInternal::Handle< ::R2D2::BaseToBot> BaseToBotPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::R2D2::BaseToBot> BaseToBotPrx;
void __patch(BaseToBotPtr&, const ::Ice::ObjectPtr&);

}

namespace R2D2
{

struct BotPosition
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float theta;
};

struct Obstacle
{
    ::Ice::Int x;
    ::Ice::Int y;
    ::Ice::Int blockage;

    bool operator==(const Obstacle& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(blockage != __rhs.blockage)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Obstacle& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(blockage < __rhs.blockage)
        {
            return true;
        }
        else if(__rhs.blockage < blockage)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Obstacle& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Obstacle& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Obstacle& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Obstacle& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::R2D2::Obstacle> ObstacleList;

typedef ::std::vector< ::Ice::Long> ObstacleGrid;

enum Sound
{
    ACKNOWLEDGE,
    ANXIOUS,
    CHEERFUL,
    EXCITED,
    LAUGHING,
    SCREAM,
    SAD
};

enum FlapState
{
    FLAPOPEN,
    FLAPCLOSED
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::R2D2::BotPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::R2D2::BotPosition, S>
{
    static void write(S* __os, const ::R2D2::BotPosition& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.theta);
    }
};

template<class S>
struct StreamReader< ::R2D2::BotPosition, S>
{
    static void read(S* __is, ::R2D2::BotPosition& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.theta);
    }
};

template<>
struct StreamableTraits< ::R2D2::Obstacle>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::R2D2::Obstacle, S>
{
    static void write(S* __os, const ::R2D2::Obstacle& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.blockage);
    }
};

template<class S>
struct StreamReader< ::R2D2::Obstacle, S>
{
    static void read(S* __is, ::R2D2::Obstacle& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.blockage);
    }
};

template<>
struct StreamableTraits< ::R2D2::Sound>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 6;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::R2D2::FlapState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace R2D2
{

class Callback_BotToBase_updateBotPosition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BotToBase_updateBotPosition_Base> Callback_BotToBase_updateBotPositionPtr;

class Callback_BotToBase_updateObstacleGrid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BotToBase_updateObstacleGrid_Base> Callback_BotToBase_updateObstacleGridPtr;

class Callback_BotToBase_updatePowerStats_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BotToBase_updatePowerStats_Base> Callback_BotToBase_updatePowerStatsPtr;

class Callback_BotToBase_updateInventory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BotToBase_updateInventory_Base> Callback_BotToBase_updateInventoryPtr;

class Callback_BotToBase_stopAndGo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BotToBase_stopAndGo_Base> Callback_BotToBase_stopAndGoPtr;

class Callback_BaseToBot_ping_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseToBot_ping_Base> Callback_BaseToBot_pingPtr;

class Callback_BaseToBot_playSound_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseToBot_playSound_Base> Callback_BaseToBot_playSoundPtr;

class Callback_BaseToBot_move_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseToBot_move_Base> Callback_BaseToBot_movePtr;

class Callback_BaseToBot_rotateHead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseToBot_rotateHead_Base> Callback_BaseToBot_rotateHeadPtr;

class Callback_BaseToBot_setFlapState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseToBot_setFlapState_Base> Callback_BaseToBot_setFlapStatePtr;

class Callback_BaseToBot_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseToBot_shutdown_Base> Callback_BaseToBot_shutdownPtr;

}

namespace IceProxy
{

namespace R2D2
{

class BotToBase : virtual public ::IceProxy::Ice::Object
{
public:

    void updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu)
    {
        updateBotPosition(enc, imu, 0);
    }
    void updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context& __ctx)
    {
        updateBotPosition(enc, imu, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateBotPosition(enc, imu, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateBotPosition(enc, imu, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateBotPosition(enc, imu, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateBotPosition(enc, imu, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu)
    {
        return begin_updateBotPosition(enc, imu, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context& __ctx)
    {
        return begin_updateBotPosition(enc, imu, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBotPosition(enc, imu, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBotPosition(enc, imu, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::R2D2::Callback_BotToBase_updateBotPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBotPosition(enc, imu, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context& __ctx, const ::R2D2::Callback_BotToBase_updateBotPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBotPosition(enc, imu, &__ctx, __del, __cookie);
    }

    void end_updateBotPosition(const ::Ice::AsyncResultPtr&);
    
private:

    void updateBotPosition(const ::R2D2::BotPosition&, const ::R2D2::BotPosition&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateBotPosition(const ::R2D2::BotPosition&, const ::R2D2::BotPosition&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateObstacleGrid(const ::R2D2::ObstacleGrid& grid)
    {
        updateObstacleGrid(grid, 0);
    }
    void updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context& __ctx)
    {
        updateObstacleGrid(grid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateObstacleGrid(grid, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateObstacleGrid(grid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateObstacleGrid(grid, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateObstacleGrid(grid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid)
    {
        return begin_updateObstacleGrid(grid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context& __ctx)
    {
        return begin_updateObstacleGrid(grid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateObstacleGrid(grid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateObstacleGrid(grid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::R2D2::Callback_BotToBase_updateObstacleGridPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateObstacleGrid(grid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context& __ctx, const ::R2D2::Callback_BotToBase_updateObstacleGridPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateObstacleGrid(grid, &__ctx, __del, __cookie);
    }

    void end_updateObstacleGrid(const ::Ice::AsyncResultPtr&);
    
private:

    void updateObstacleGrid(const ::R2D2::ObstacleGrid&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateObstacleGrid(const ::R2D2::ObstacleGrid&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent)
    {
        updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, 0);
    }
    void updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context& __ctx)
    {
        updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent)
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context& __ctx)
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::R2D2::Callback_BotToBase_updatePowerStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context& __ctx, const ::R2D2::Callback_BotToBase_updatePowerStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, &__ctx, __del, __cookie);
    }

    void end_updatePowerStats(const ::Ice::AsyncResultPtr&);
    
private:

    void updatePowerStats(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updatePowerStats(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateInventory(::Ice::Int inventory)
    {
        updateInventory(inventory, 0);
    }
    void updateInventory(::Ice::Int inventory, const ::Ice::Context& __ctx)
    {
        updateInventory(inventory, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateInventory(::Ice::Int inventory, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateInventory(inventory, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateInventory(::Ice::Int inventory, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateInventory(inventory, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateInventory(::Ice::Int inventory, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateInventory(inventory, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateInventory(::Ice::Int inventory, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateInventory(inventory, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateInventory(::Ice::Int inventory)
    {
        return begin_updateInventory(inventory, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateInventory(::Ice::Int inventory, const ::Ice::Context& __ctx)
    {
        return begin_updateInventory(inventory, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateInventory(::Ice::Int inventory, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateInventory(inventory, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateInventory(::Ice::Int inventory, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateInventory(inventory, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateInventory(::Ice::Int inventory, const ::R2D2::Callback_BotToBase_updateInventoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateInventory(inventory, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateInventory(::Ice::Int inventory, const ::Ice::Context& __ctx, const ::R2D2::Callback_BotToBase_updateInventoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateInventory(inventory, &__ctx, __del, __cookie);
    }

    void end_updateInventory(const ::Ice::AsyncResultPtr&);
    
private:

    void updateInventory(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateInventory(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopAndGo(bool stopped)
    {
        stopAndGo(stopped, 0);
    }
    void stopAndGo(bool stopped, const ::Ice::Context& __ctx)
    {
        stopAndGo(stopped, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopAndGo(bool stopped, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopAndGo(stopped, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stopAndGo(bool stopped, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopAndGo(stopped, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopAndGo(bool stopped, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopAndGo(stopped, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopAndGo(bool stopped, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopAndGo(stopped, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stopAndGo(bool stopped)
    {
        return begin_stopAndGo(stopped, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopAndGo(bool stopped, const ::Ice::Context& __ctx)
    {
        return begin_stopAndGo(stopped, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopAndGo(bool stopped, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopAndGo(stopped, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopAndGo(bool stopped, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopAndGo(stopped, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopAndGo(bool stopped, const ::R2D2::Callback_BotToBase_stopAndGoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopAndGo(stopped, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopAndGo(bool stopped, const ::Ice::Context& __ctx, const ::R2D2::Callback_BotToBase_stopAndGoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopAndGo(stopped, &__ctx, __del, __cookie);
    }

    void end_stopAndGo(const ::Ice::AsyncResultPtr&);
    
private:

    void stopAndGo(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopAndGo(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BotToBase> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_secure(bool __secure) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_twoway() const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_oneway() const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_batchOneway() const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_datagram() const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_batchDatagram() const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_compress(bool __compress) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BotToBase> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BotToBase*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class BaseToBot : virtual public ::IceProxy::Ice::Object
{
public:

    void ping()
    {
        ping(0);
    }
    void ping(const ::Ice::Context& __ctx)
    {
        ping(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ping()
    {
        return begin_ping(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx)
    {
        return begin_ping(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::R2D2::Callback_BaseToBot_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::R2D2::Callback_BaseToBot_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    void end_ping(const ::Ice::AsyncResultPtr&);
    
private:

    void ping(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void playSound(::R2D2::Sound snd)
    {
        playSound(snd, 0);
    }
    void playSound(::R2D2::Sound snd, const ::Ice::Context& __ctx)
    {
        playSound(snd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_playSound(::R2D2::Sound snd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_playSound(snd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_playSound(::R2D2::Sound snd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_playSound(snd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_playSound(::R2D2::Sound snd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_playSound(snd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_playSound(::R2D2::Sound snd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_playSound(snd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_playSound(::R2D2::Sound snd)
    {
        return begin_playSound(snd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_playSound(::R2D2::Sound snd, const ::Ice::Context& __ctx)
    {
        return begin_playSound(snd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_playSound(::R2D2::Sound snd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSound(snd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSound(::R2D2::Sound snd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSound(snd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSound(::R2D2::Sound snd, const ::R2D2::Callback_BaseToBot_playSoundPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSound(snd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSound(::R2D2::Sound snd, const ::Ice::Context& __ctx, const ::R2D2::Callback_BaseToBot_playSoundPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSound(snd, &__ctx, __del, __cookie);
    }

    void end_playSound(const ::Ice::AsyncResultPtr&);
    
private:

    void playSound(::R2D2::Sound, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_playSound(::R2D2::Sound, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void move(::Ice::Int lSpeed, ::Ice::Int rSpeed)
    {
        move(lSpeed, rSpeed, 0);
    }
    void move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context& __ctx)
    {
        move(lSpeed, rSpeed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_move(lSpeed, rSpeed, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_move(lSpeed, rSpeed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_move(lSpeed, rSpeed, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_move(lSpeed, rSpeed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed)
    {
        return begin_move(lSpeed, rSpeed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context& __ctx)
    {
        return begin_move(lSpeed, rSpeed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move(lSpeed, rSpeed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move(lSpeed, rSpeed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::R2D2::Callback_BaseToBot_movePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move(lSpeed, rSpeed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context& __ctx, const ::R2D2::Callback_BaseToBot_movePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move(lSpeed, rSpeed, &__ctx, __del, __cookie);
    }

    void end_move(const ::Ice::AsyncResultPtr&);
    
private:

    void move(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_move(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void rotateHead(::Ice::Int angle)
    {
        rotateHead(angle, 0);
    }
    void rotateHead(::Ice::Int angle, const ::Ice::Context& __ctx)
    {
        rotateHead(angle, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_rotateHead(::Ice::Int angle, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_rotateHead(angle, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_rotateHead(::Ice::Int angle, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rotateHead(angle, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_rotateHead(::Ice::Int angle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_rotateHead(angle, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_rotateHead(::Ice::Int angle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rotateHead(angle, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_rotateHead(::Ice::Int angle)
    {
        return begin_rotateHead(angle, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rotateHead(::Ice::Int angle, const ::Ice::Context& __ctx)
    {
        return begin_rotateHead(angle, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rotateHead(::Ice::Int angle, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rotateHead(angle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rotateHead(::Ice::Int angle, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rotateHead(angle, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rotateHead(::Ice::Int angle, const ::R2D2::Callback_BaseToBot_rotateHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rotateHead(angle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rotateHead(::Ice::Int angle, const ::Ice::Context& __ctx, const ::R2D2::Callback_BaseToBot_rotateHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rotateHead(angle, &__ctx, __del, __cookie);
    }

    void end_rotateHead(const ::Ice::AsyncResultPtr&);
    
private:

    void rotateHead(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_rotateHead(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFlapState(::R2D2::FlapState state)
    {
        setFlapState(state, 0);
    }
    void setFlapState(::R2D2::FlapState state, const ::Ice::Context& __ctx)
    {
        setFlapState(state, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFlapState(::R2D2::FlapState state, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFlapState(state, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setFlapState(::R2D2::FlapState state, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFlapState(state, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFlapState(::R2D2::FlapState state, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFlapState(state, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFlapState(::R2D2::FlapState state, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFlapState(state, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setFlapState(::R2D2::FlapState state)
    {
        return begin_setFlapState(state, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFlapState(::R2D2::FlapState state, const ::Ice::Context& __ctx)
    {
        return begin_setFlapState(state, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFlapState(::R2D2::FlapState state, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFlapState(state, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFlapState(::R2D2::FlapState state, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFlapState(state, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFlapState(::R2D2::FlapState state, const ::R2D2::Callback_BaseToBot_setFlapStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFlapState(state, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFlapState(::R2D2::FlapState state, const ::Ice::Context& __ctx, const ::R2D2::Callback_BaseToBot_setFlapStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFlapState(state, &__ctx, __del, __cookie);
    }

    void end_setFlapState(const ::Ice::AsyncResultPtr&);
    
private:

    void setFlapState(::R2D2::FlapState, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFlapState(::R2D2::FlapState, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::R2D2::Callback_BaseToBot_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::R2D2::Callback_BaseToBot_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_secure(bool __secure) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_twoway() const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_oneway() const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_batchOneway() const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_datagram() const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_batchDatagram() const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_compress(bool __compress) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BaseToBot> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BaseToBot*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace R2D2
{

class BotToBase : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void updateBotPosition(const ::R2D2::BotPosition&, const ::R2D2::BotPosition&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateObstacleGrid(const ::R2D2::ObstacleGrid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updatePowerStats(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateInventory(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void stopAndGo(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class BaseToBot : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void ping(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void playSound(::R2D2::Sound, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void move(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void rotateHead(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setFlapState(::R2D2::FlapState, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace R2D2
{

class BotToBase : virtual public ::IceDelegate::R2D2::BotToBase,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void updateBotPosition(const ::R2D2::BotPosition&, const ::R2D2::BotPosition&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateObstacleGrid(const ::R2D2::ObstacleGrid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updatePowerStats(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateInventory(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stopAndGo(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BaseToBot : virtual public ::IceDelegate::R2D2::BaseToBot,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void ping(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void playSound(::R2D2::Sound, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void move(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void rotateHead(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFlapState(::R2D2::FlapState, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace R2D2
{

class BotToBase : virtual public ::IceDelegate::R2D2::BotToBase,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void updateBotPosition(const ::R2D2::BotPosition&, const ::R2D2::BotPosition&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateObstacleGrid(const ::R2D2::ObstacleGrid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updatePowerStats(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateInventory(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stopAndGo(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BaseToBot : virtual public ::IceDelegate::R2D2::BaseToBot,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void ping(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void playSound(::R2D2::Sound, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void move(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void rotateHead(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFlapState(::R2D2::FlapState, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace R2D2
{

class BotToBase : virtual public ::Ice::Object
{
public:

    typedef BotToBasePrx ProxyType;
    typedef BotToBasePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void updateBotPosition(const ::R2D2::BotPosition&, const ::R2D2::BotPosition&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateBotPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateObstacleGrid(const ::R2D2::ObstacleGrid&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateObstacleGrid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updatePowerStats(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updatePowerStats(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateInventory(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateInventory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopAndGo(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopAndGo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const BotToBase& l, const BotToBase& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BotToBase& l, const BotToBase& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class BaseToBot : virtual public ::Ice::Object
{
public:

    typedef BaseToBotPrx ProxyType;
    typedef BaseToBotPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void ping(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void playSound(::R2D2::Sound, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___playSound(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void move(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___move(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void rotateHead(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___rotateHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFlapState(::R2D2::FlapState, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFlapState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const BaseToBot& l, const BaseToBot& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BaseToBot& l, const BaseToBot& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace R2D2
{

template<class T>
class CallbackNC_BotToBase_updateBotPosition : public Callback_BotToBase_updateBotPosition_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BotToBase_updateBotPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateBotPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateBotPosition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateBotPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateBotPosition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BotToBase_updateBotPosition : public Callback_BotToBase_updateBotPosition_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BotToBase_updateBotPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateBotPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateBotPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateBotPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateBotPositionPtr
newCallback_BotToBase_updateBotPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateBotPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BotToBase_updateObstacleGrid : public Callback_BotToBase_updateObstacleGrid_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BotToBase_updateObstacleGrid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateObstacleGrid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateObstacleGrid<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateObstacleGrid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateObstacleGrid<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BotToBase_updateObstacleGrid : public Callback_BotToBase_updateObstacleGrid_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BotToBase_updateObstacleGrid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateObstacleGrid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateObstacleGrid<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateObstacleGrid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateObstacleGridPtr
newCallback_BotToBase_updateObstacleGrid(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateObstacleGrid<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BotToBase_updatePowerStats : public Callback_BotToBase_updatePowerStats_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BotToBase_updatePowerStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updatePowerStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updatePowerStats<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updatePowerStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updatePowerStats<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BotToBase_updatePowerStats : public Callback_BotToBase_updatePowerStats_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BotToBase_updatePowerStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updatePowerStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updatePowerStats<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updatePowerStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updatePowerStatsPtr
newCallback_BotToBase_updatePowerStats(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updatePowerStats<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BotToBase_updateInventory : public Callback_BotToBase_updateInventory_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BotToBase_updateInventory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateInventory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateInventory<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateInventory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_updateInventory<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BotToBase_updateInventory : public Callback_BotToBase_updateInventory_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BotToBase_updateInventory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateInventory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateInventory<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateInventory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_updateInventoryPtr
newCallback_BotToBase_updateInventory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_updateInventory<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BotToBase_stopAndGo : public Callback_BotToBase_stopAndGo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BotToBase_stopAndGo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_stopAndGo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_stopAndGo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_stopAndGo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BotToBase_stopAndGo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BotToBase_stopAndGo : public Callback_BotToBase_stopAndGo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BotToBase_stopAndGo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_stopAndGo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_stopAndGo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_stopAndGo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BotToBase_stopAndGoPtr
newCallback_BotToBase_stopAndGo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BotToBase_stopAndGo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BaseToBot_ping : public Callback_BaseToBot_ping_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BaseToBot_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_ping<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_ping<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseToBot_ping : public Callback_BaseToBot_ping_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BaseToBot_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_pingPtr
newCallback_BaseToBot_ping(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BaseToBot_playSound : public Callback_BaseToBot_playSound_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BaseToBot_playSound(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_playSound<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_playSound<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_playSound<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_playSound<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseToBot_playSound : public Callback_BaseToBot_playSound_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BaseToBot_playSound(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_playSound<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_playSound<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_playSound<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_playSoundPtr
newCallback_BaseToBot_playSound(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_playSound<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BaseToBot_move : public Callback_BaseToBot_move_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BaseToBot_move(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_move<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_move<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_move<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_move<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseToBot_move : public Callback_BaseToBot_move_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BaseToBot_move(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_move<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_move<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_move<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_movePtr
newCallback_BaseToBot_move(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_move<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BaseToBot_rotateHead : public Callback_BaseToBot_rotateHead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BaseToBot_rotateHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_rotateHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_rotateHead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_rotateHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_rotateHead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseToBot_rotateHead : public Callback_BaseToBot_rotateHead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BaseToBot_rotateHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_rotateHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_rotateHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_rotateHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_rotateHeadPtr
newCallback_BaseToBot_rotateHead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_rotateHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BaseToBot_setFlapState : public Callback_BaseToBot_setFlapState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BaseToBot_setFlapState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_setFlapState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_setFlapState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_setFlapState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_setFlapState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseToBot_setFlapState : public Callback_BaseToBot_setFlapState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BaseToBot_setFlapState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_setFlapState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_setFlapState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_setFlapState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_setFlapStatePtr
newCallback_BaseToBot_setFlapState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_setFlapState<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BaseToBot_shutdown : public Callback_BaseToBot_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BaseToBot_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseToBot_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseToBot_shutdown : public Callback_BaseToBot_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BaseToBot_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseToBot_shutdownPtr
newCallback_BaseToBot_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseToBot_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
