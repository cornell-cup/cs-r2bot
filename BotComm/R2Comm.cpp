// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `R2Comm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <R2Comm.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __R2D2__BotToBase__updateBotPosition_name = "updateBotPosition";

const ::std::string __R2D2__BotToBase__updateObstacleGrid_name = "updateObstacleGrid";

const ::std::string __R2D2__BotToBase__updatePowerStats_name = "updatePowerStats";

const ::std::string __R2D2__BotToBase__updateInventory_name = "updateInventory";

const ::std::string __R2D2__BotToBase__stopAndGo_name = "stopAndGo";

const ::std::string __R2D2__BaseToBot__ping_name = "ping";

const ::std::string __R2D2__BaseToBot__playSound_name = "playSound";

const ::std::string __R2D2__BaseToBot__move_name = "move";

const ::std::string __R2D2__BaseToBot__rotateHead_name = "rotateHead";

const ::std::string __R2D2__BaseToBot__setFlapState_name = "setFlapState";

const ::std::string __R2D2__BaseToBot__shutdown_name = "shutdown";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::R2D2::upCast(::IceProxy::R2D2::BotToBase* p) { return p; }

void
::IceProxy::R2D2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::R2D2::BotToBase>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::R2D2::BotToBase;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::R2D2::BotToBase::updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BotToBase__updateBotPosition_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BotToBase* __del = dynamic_cast< ::IceDelegate::R2D2::BotToBase*>(__delBase.get());
            __del->updateBotPosition(enc, imu, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BotToBase::begin_updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BotToBase__updateBotPosition_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BotToBase__updateBotPosition_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(enc);
        __os->write(imu);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BotToBase::end_updateBotPosition(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BotToBase__updateBotPosition_name);
}

void
IceProxy::R2D2::BotToBase::updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BotToBase__updateObstacleGrid_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BotToBase* __del = dynamic_cast< ::IceDelegate::R2D2::BotToBase*>(__delBase.get());
            __del->updateObstacleGrid(grid, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BotToBase::begin_updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BotToBase__updateObstacleGrid_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BotToBase__updateObstacleGrid_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(grid);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BotToBase::end_updateObstacleGrid(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BotToBase__updateObstacleGrid_name);
}

void
IceProxy::R2D2::BotToBase::updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BotToBase__updatePowerStats_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BotToBase* __del = dynamic_cast< ::IceDelegate::R2D2::BotToBase*>(__delBase.get());
            __del->updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BotToBase::begin_updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BotToBase__updatePowerStats_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BotToBase__updatePowerStats_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(batteryPercent);
        __os->write(voltage);
        __os->write(regulatedCurrent);
        __os->write(unregulatedCurrent);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BotToBase::end_updatePowerStats(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BotToBase__updatePowerStats_name);
}

void
IceProxy::R2D2::BotToBase::updateInventory(::Ice::Int inventory, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BotToBase__updateInventory_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BotToBase* __del = dynamic_cast< ::IceDelegate::R2D2::BotToBase*>(__delBase.get());
            __del->updateInventory(inventory, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BotToBase::begin_updateInventory(::Ice::Int inventory, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BotToBase__updateInventory_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BotToBase__updateInventory_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(inventory);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BotToBase::end_updateInventory(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BotToBase__updateInventory_name);
}

void
IceProxy::R2D2::BotToBase::stopAndGo(bool stopped, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BotToBase__stopAndGo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BotToBase* __del = dynamic_cast< ::IceDelegate::R2D2::BotToBase*>(__delBase.get());
            __del->stopAndGo(stopped, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BotToBase::begin_stopAndGo(bool stopped, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BotToBase__stopAndGo_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BotToBase__stopAndGo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(stopped);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BotToBase::end_stopAndGo(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BotToBase__stopAndGo_name);
}

const ::std::string&
IceProxy::R2D2::BotToBase::ice_staticId()
{
    return ::R2D2::BotToBase::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::R2D2::BotToBase::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::R2D2::BotToBase);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::R2D2::BotToBase::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::R2D2::BotToBase);
}

::IceProxy::Ice::Object*
IceProxy::R2D2::BotToBase::__newInstance() const
{
    return new BotToBase;
}
::IceProxy::Ice::Object* ::IceProxy::R2D2::upCast(::IceProxy::R2D2::BaseToBot* p) { return p; }

void
::IceProxy::R2D2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::R2D2::BaseToBot>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::R2D2::BaseToBot;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::R2D2::BaseToBot::ping(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BaseToBot__ping_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BaseToBot* __del = dynamic_cast< ::IceDelegate::R2D2::BaseToBot*>(__delBase.get());
            __del->ping(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BaseToBot::begin_ping(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BaseToBot__ping_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BaseToBot__ping_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BaseToBot::end_ping(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BaseToBot__ping_name);
}

void
IceProxy::R2D2::BaseToBot::playSound(::R2D2::Sound snd, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BaseToBot__playSound_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BaseToBot* __del = dynamic_cast< ::IceDelegate::R2D2::BaseToBot*>(__delBase.get());
            __del->playSound(snd, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BaseToBot::begin_playSound(::R2D2::Sound snd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BaseToBot__playSound_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BaseToBot__playSound_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(snd);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BaseToBot::end_playSound(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BaseToBot__playSound_name);
}

void
IceProxy::R2D2::BaseToBot::move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BaseToBot__move_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BaseToBot* __del = dynamic_cast< ::IceDelegate::R2D2::BaseToBot*>(__delBase.get());
            __del->move(lSpeed, rSpeed, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BaseToBot::begin_move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BaseToBot__move_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BaseToBot__move_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(lSpeed);
        __os->write(rSpeed);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BaseToBot::end_move(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BaseToBot__move_name);
}

void
IceProxy::R2D2::BaseToBot::rotateHead(::Ice::Int angle, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BaseToBot__rotateHead_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BaseToBot* __del = dynamic_cast< ::IceDelegate::R2D2::BaseToBot*>(__delBase.get());
            __del->rotateHead(angle, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BaseToBot::begin_rotateHead(::Ice::Int angle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BaseToBot__rotateHead_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BaseToBot__rotateHead_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(angle);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BaseToBot::end_rotateHead(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BaseToBot__rotateHead_name);
}

void
IceProxy::R2D2::BaseToBot::setFlapState(::R2D2::FlapState state, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BaseToBot__setFlapState_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BaseToBot* __del = dynamic_cast< ::IceDelegate::R2D2::BaseToBot*>(__delBase.get());
            __del->setFlapState(state, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BaseToBot::begin_setFlapState(::R2D2::FlapState state, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BaseToBot__setFlapState_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BaseToBot__setFlapState_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(state);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BaseToBot::end_setFlapState(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BaseToBot__setFlapState_name);
}

void
IceProxy::R2D2::BaseToBot::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __R2D2__BaseToBot__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::R2D2::BaseToBot* __del = dynamic_cast< ::IceDelegate::R2D2::BaseToBot*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::R2D2::BaseToBot::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __R2D2__BaseToBot__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__R2D2__BaseToBot__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::R2D2::BaseToBot::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __R2D2__BaseToBot__shutdown_name);
}

const ::std::string&
IceProxy::R2D2::BaseToBot::ice_staticId()
{
    return ::R2D2::BaseToBot::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::R2D2::BaseToBot::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::R2D2::BaseToBot);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::R2D2::BaseToBot::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::R2D2::BaseToBot);
}

::IceProxy::Ice::Object*
IceProxy::R2D2::BaseToBot::__newInstance() const
{
    return new BaseToBot;
}

void
IceDelegateM::R2D2::BotToBase::updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BotToBase__updateBotPosition_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(enc);
        __os->write(imu);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BotToBase::updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BotToBase__updateObstacleGrid_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(grid);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BotToBase::updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BotToBase__updatePowerStats_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(batteryPercent);
        __os->write(voltage);
        __os->write(regulatedCurrent);
        __os->write(unregulatedCurrent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BotToBase::updateInventory(::Ice::Int inventory, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BotToBase__updateInventory_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(inventory);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BotToBase::stopAndGo(bool stopped, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BotToBase__stopAndGo_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(stopped);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BaseToBot::ping(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BaseToBot__ping_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BaseToBot::playSound(::R2D2::Sound snd, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BaseToBot__playSound_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(snd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BaseToBot::move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BaseToBot__move_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(lSpeed);
        __os->write(rSpeed);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BaseToBot::rotateHead(::Ice::Int angle, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BaseToBot__rotateHead_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(angle);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BaseToBot::setFlapState(::R2D2::FlapState state, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BaseToBot__setFlapState_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(state);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::R2D2::BaseToBot::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __R2D2__BaseToBot__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::R2D2::BotToBase::updateBotPosition(const ::R2D2::BotPosition& enc, const ::R2D2::BotPosition& imu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::R2D2::BotPosition& __p_enc, const ::R2D2::BotPosition& __p_imu, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_enc(__p_enc),
            _m_imu(__p_imu)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BotToBase* servant = dynamic_cast< ::R2D2::BotToBase*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->updateBotPosition(_m_enc, _m_imu, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::R2D2::BotPosition& _m_enc;
        const ::R2D2::BotPosition& _m_imu;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BotToBase__updateBotPosition_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(enc, imu, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BotToBase::updateObstacleGrid(const ::R2D2::ObstacleGrid& grid, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::R2D2::ObstacleGrid& __p_grid, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_grid(__p_grid)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BotToBase* servant = dynamic_cast< ::R2D2::BotToBase*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->updateObstacleGrid(_m_grid, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::R2D2::ObstacleGrid& _m_grid;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BotToBase__updateObstacleGrid_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(grid, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BotToBase::updatePowerStats(::Ice::Float batteryPercent, ::Ice::Float voltage, ::Ice::Float regulatedCurrent, ::Ice::Float unregulatedCurrent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float __p_batteryPercent, ::Ice::Float __p_voltage, ::Ice::Float __p_regulatedCurrent, ::Ice::Float __p_unregulatedCurrent, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_batteryPercent(__p_batteryPercent),
            _m_voltage(__p_voltage),
            _m_regulatedCurrent(__p_regulatedCurrent),
            _m_unregulatedCurrent(__p_unregulatedCurrent)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BotToBase* servant = dynamic_cast< ::R2D2::BotToBase*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->updatePowerStats(_m_batteryPercent, _m_voltage, _m_regulatedCurrent, _m_unregulatedCurrent, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Float _m_batteryPercent;
        ::Ice::Float _m_voltage;
        ::Ice::Float _m_regulatedCurrent;
        ::Ice::Float _m_unregulatedCurrent;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BotToBase__updatePowerStats_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BotToBase::updateInventory(::Ice::Int inventory, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_inventory, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_inventory(__p_inventory)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BotToBase* servant = dynamic_cast< ::R2D2::BotToBase*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->updateInventory(_m_inventory, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_inventory;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BotToBase__updateInventory_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(inventory, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BotToBase::stopAndGo(bool stopped, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool __p_stopped, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_stopped(__p_stopped)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BotToBase* servant = dynamic_cast< ::R2D2::BotToBase*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->stopAndGo(_m_stopped, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool _m_stopped;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BotToBase__stopAndGo_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(stopped, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BaseToBot::ping(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BaseToBot* servant = dynamic_cast< ::R2D2::BaseToBot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->ping(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BaseToBot__ping_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BaseToBot::playSound(::R2D2::Sound snd, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::R2D2::Sound __p_snd, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_snd(__p_snd)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BaseToBot* servant = dynamic_cast< ::R2D2::BaseToBot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->playSound(_m_snd, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::R2D2::Sound _m_snd;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BaseToBot__playSound_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(snd, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BaseToBot::move(::Ice::Int lSpeed, ::Ice::Int rSpeed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_lSpeed, ::Ice::Int __p_rSpeed, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_lSpeed(__p_lSpeed),
            _m_rSpeed(__p_rSpeed)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BaseToBot* servant = dynamic_cast< ::R2D2::BaseToBot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->move(_m_lSpeed, _m_rSpeed, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_lSpeed;
        ::Ice::Int _m_rSpeed;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BaseToBot__move_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(lSpeed, rSpeed, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BaseToBot::rotateHead(::Ice::Int angle, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_angle, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_angle(__p_angle)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BaseToBot* servant = dynamic_cast< ::R2D2::BaseToBot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->rotateHead(_m_angle, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_angle;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BaseToBot__rotateHead_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(angle, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BaseToBot::setFlapState(::R2D2::FlapState state, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::R2D2::FlapState __p_state, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_state(__p_state)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BaseToBot* servant = dynamic_cast< ::R2D2::BaseToBot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setFlapState(_m_state, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::R2D2::FlapState _m_state;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BaseToBot__setFlapState_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(state, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::R2D2::BaseToBot::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::R2D2::BaseToBot* servant = dynamic_cast< ::R2D2::BaseToBot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->shutdown(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __R2D2__BaseToBot__shutdown_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* R2D2::upCast(::R2D2::BotToBase* p) { return p; }

namespace
{
const ::std::string __R2D2__BotToBase_ids[2] =
{
    "::Ice::Object",
    "::R2D2::BotToBase"
};

}

bool
R2D2::BotToBase::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__R2D2__BotToBase_ids, __R2D2__BotToBase_ids + 2, _s);
}

::std::vector< ::std::string>
R2D2::BotToBase::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__R2D2__BotToBase_ids[0], &__R2D2__BotToBase_ids[2]);
}

const ::std::string&
R2D2::BotToBase::ice_id(const ::Ice::Current&) const
{
    return __R2D2__BotToBase_ids[1];
}

const ::std::string&
R2D2::BotToBase::ice_staticId()
{
    return __R2D2__BotToBase_ids[1];
}

::Ice::DispatchStatus
R2D2::BotToBase::___updateBotPosition(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::R2D2::BotPosition enc;
    ::R2D2::BotPosition imu;
    __is->read(enc);
    __is->read(imu);
    __inS.endReadParams();
    updateBotPosition(enc, imu, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BotToBase::___updateObstacleGrid(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::R2D2::ObstacleGrid grid;
    __is->read(grid);
    __inS.endReadParams();
    updateObstacleGrid(grid, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BotToBase::___updatePowerStats(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float batteryPercent;
    ::Ice::Float voltage;
    ::Ice::Float regulatedCurrent;
    ::Ice::Float unregulatedCurrent;
    __is->read(batteryPercent);
    __is->read(voltage);
    __is->read(regulatedCurrent);
    __is->read(unregulatedCurrent);
    __inS.endReadParams();
    updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BotToBase::___updateInventory(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int inventory;
    __is->read(inventory);
    __inS.endReadParams();
    updateInventory(inventory, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BotToBase::___stopAndGo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool stopped;
    __is->read(stopped);
    __inS.endReadParams();
    stopAndGo(stopped, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __R2D2__BotToBase_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "stopAndGo",
    "updateBotPosition",
    "updateInventory",
    "updateObstacleGrid",
    "updatePowerStats"
};

}

::Ice::DispatchStatus
R2D2::BotToBase::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__R2D2__BotToBase_all, __R2D2__BotToBase_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __R2D2__BotToBase_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___stopAndGo(in, current);
        }
        case 5:
        {
            return ___updateBotPosition(in, current);
        }
        case 6:
        {
            return ___updateInventory(in, current);
        }
        case 7:
        {
            return ___updateObstacleGrid(in, current);
        }
        case 8:
        {
            return ___updatePowerStats(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
R2D2::BotToBase::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
R2D2::BotToBase::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
R2D2::__patch(BotToBasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::R2D2::BotToBasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::R2D2::BotToBase::ice_staticId(), v);
    }
}

::Ice::Object* R2D2::upCast(::R2D2::BaseToBot* p) { return p; }

namespace
{
const ::std::string __R2D2__BaseToBot_ids[2] =
{
    "::Ice::Object",
    "::R2D2::BaseToBot"
};

}

bool
R2D2::BaseToBot::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__R2D2__BaseToBot_ids, __R2D2__BaseToBot_ids + 2, _s);
}

::std::vector< ::std::string>
R2D2::BaseToBot::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__R2D2__BaseToBot_ids[0], &__R2D2__BaseToBot_ids[2]);
}

const ::std::string&
R2D2::BaseToBot::ice_id(const ::Ice::Current&) const
{
    return __R2D2__BaseToBot_ids[1];
}

const ::std::string&
R2D2::BaseToBot::ice_staticId()
{
    return __R2D2__BaseToBot_ids[1];
}

::Ice::DispatchStatus
R2D2::BaseToBot::___ping(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ping(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BaseToBot::___playSound(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::R2D2::Sound snd;
    __is->read(snd);
    __inS.endReadParams();
    playSound(snd, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BaseToBot::___move(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int lSpeed;
    ::Ice::Int rSpeed;
    __is->read(lSpeed);
    __is->read(rSpeed);
    __inS.endReadParams();
    move(lSpeed, rSpeed, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BaseToBot::___rotateHead(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int angle;
    __is->read(angle);
    __inS.endReadParams();
    rotateHead(angle, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BaseToBot::___setFlapState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::R2D2::FlapState state;
    __is->read(state);
    __inS.endReadParams();
    setFlapState(state, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
R2D2::BaseToBot::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __R2D2__BaseToBot_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "move",
    "ping",
    "playSound",
    "rotateHead",
    "setFlapState",
    "shutdown"
};

}

::Ice::DispatchStatus
R2D2::BaseToBot::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__R2D2__BaseToBot_all, __R2D2__BaseToBot_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __R2D2__BaseToBot_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___move(in, current);
        }
        case 5:
        {
            return ___ping(in, current);
        }
        case 6:
        {
            return ___playSound(in, current);
        }
        case 7:
        {
            return ___rotateHead(in, current);
        }
        case 8:
        {
            return ___setFlapState(in, current);
        }
        case 9:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
R2D2::BaseToBot::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
R2D2::BaseToBot::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
R2D2::__patch(BaseToBotPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::R2D2::BaseToBotPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::R2D2::BaseToBot::ice_staticId(), v);
    }
}
