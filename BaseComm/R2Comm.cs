// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `R2Comm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace R2D2
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct BotPosition
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public float x;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public float y;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public float theta;

        #endregion

        #region Constructor

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public BotPosition(float x, float y, float theta)
        {
            this.x = x;
            this.y = y;
            this.theta = theta;
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::R2D2::BotPosition");
            IceInternal.HashUtil.hashAdd(ref h__, x);
            IceInternal.HashUtil.hashAdd(ref h__, y);
            IceInternal.HashUtil.hashAdd(ref h__, theta);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(!(other__ is BotPosition))
            {
                return false;
            }
            BotPosition o__ = (BotPosition)other__;
            if(!x.Equals(o__.x))
            {
                return false;
            }
            if(!y.Equals(o__.y))
            {
                return false;
            }
            if(!theta.Equals(o__.theta))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(BotPosition lhs__, BotPosition rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(BotPosition lhs__, BotPosition rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeFloat(x);
            os__.writeFloat(y);
            os__.writeFloat(theta);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            x = is__.readFloat();
            y = is__.readFloat();
            theta = is__.readFloat();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct Obstacle
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int x;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int y;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int blockage;

        #endregion

        #region Constructor

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public Obstacle(int x, int y, int blockage)
        {
            this.x = x;
            this.y = y;
            this.blockage = blockage;
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::R2D2::Obstacle");
            IceInternal.HashUtil.hashAdd(ref h__, x);
            IceInternal.HashUtil.hashAdd(ref h__, y);
            IceInternal.HashUtil.hashAdd(ref h__, blockage);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(!(other__ is Obstacle))
            {
                return false;
            }
            Obstacle o__ = (Obstacle)other__;
            if(!x.Equals(o__.x))
            {
                return false;
            }
            if(!y.Equals(o__.y))
            {
                return false;
            }
            if(!blockage.Equals(o__.blockage))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(Obstacle lhs__, Obstacle rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(Obstacle lhs__, Obstacle rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(x);
            os__.writeInt(y);
            os__.writeInt(blockage);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            x = is__.readInt();
            y = is__.readInt();
            blockage = is__.readInt();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public enum Sound
    {
        ACKNOWLEDGE,
        ANXIOUS,
        CHEERFUL,
        EXCITED,
        LAUGHING,
        SCREAM,
        SAD
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public enum FlapState
    {
        FLAPOPEN,
        FLAPCLOSED
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface BotToBase : Ice.Object, BotToBaseOperations_, BotToBaseOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface BaseToBot : Ice.Object, BaseToBotOperations_, BaseToBotOperationsNC_
    {
    }
}

namespace R2D2
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BotToBase_updateBotPosition();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BotToBase_updateObstacleGrid();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BotToBase_updatePowerStats();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BotToBase_updateInventory();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BotToBase_stopAndGo();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BaseToBot_ping();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BaseToBot_playSound();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BaseToBot_move();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BaseToBot_rotateHead();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BaseToBot_setFlapState();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BaseToBot_shutdown();
}

namespace R2D2
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BotToBasePrx : Ice.ObjectPrx
    {
        void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu);
        void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BotToBase_updateBotPosition> begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu);
        Ice.AsyncResult<R2D2.Callback_BotToBase_updateBotPosition> begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_updateBotPosition(Ice.AsyncResult r__);

        void updateObstacleGrid(long[] grid);
        void updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BotToBase_updateObstacleGrid> begin_updateObstacleGrid(long[] grid);
        Ice.AsyncResult<R2D2.Callback_BotToBase_updateObstacleGrid> begin_updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_updateObstacleGrid(long[] grid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_updateObstacleGrid(Ice.AsyncResult r__);

        void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent);
        void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BotToBase_updatePowerStats> begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent);
        Ice.AsyncResult<R2D2.Callback_BotToBase_updatePowerStats> begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_updatePowerStats(Ice.AsyncResult r__);

        void updateInventory(int inventory);
        void updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BotToBase_updateInventory> begin_updateInventory(int inventory);
        Ice.AsyncResult<R2D2.Callback_BotToBase_updateInventory> begin_updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_updateInventory(int inventory, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_updateInventory(Ice.AsyncResult r__);

        void stopAndGo(bool stopped);
        void stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BotToBase_stopAndGo> begin_stopAndGo(bool stopped);
        Ice.AsyncResult<R2D2.Callback_BotToBase_stopAndGo> begin_stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_stopAndGo(bool stopped, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_stopAndGo(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BaseToBotPrx : Ice.ObjectPrx
    {
        void ping();
        void ping(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BaseToBot_ping> begin_ping();
        Ice.AsyncResult<R2D2.Callback_BaseToBot_ping> begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_ping(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_ping(Ice.AsyncResult r__);

        void playSound(R2D2.Sound snd);
        void playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BaseToBot_playSound> begin_playSound(R2D2.Sound snd);
        Ice.AsyncResult<R2D2.Callback_BaseToBot_playSound> begin_playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_playSound(R2D2.Sound snd, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_playSound(Ice.AsyncResult r__);

        void move(int lSpeed, int rSpeed);
        void move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BaseToBot_move> begin_move(int lSpeed, int rSpeed);
        Ice.AsyncResult<R2D2.Callback_BaseToBot_move> begin_move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_move(int lSpeed, int rSpeed, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_move(Ice.AsyncResult r__);

        void rotateHead(int angle);
        void rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BaseToBot_rotateHead> begin_rotateHead(int angle);
        Ice.AsyncResult<R2D2.Callback_BaseToBot_rotateHead> begin_rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_rotateHead(int angle, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_rotateHead(Ice.AsyncResult r__);

        void setFlapState(R2D2.FlapState state);
        void setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BaseToBot_setFlapState> begin_setFlapState(R2D2.FlapState state);
        Ice.AsyncResult<R2D2.Callback_BaseToBot_setFlapState> begin_setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setFlapState(R2D2.FlapState state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setFlapState(Ice.AsyncResult r__);

        void shutdown();
        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<R2D2.Callback_BaseToBot_shutdown> begin_shutdown();
        Ice.AsyncResult<R2D2.Callback_BaseToBot_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_shutdown(Ice.AsyncResult r__);
    }
}

namespace R2D2
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BotToBaseOperations_
    {
        void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, Ice.Current current__);

        void updateObstacleGrid(long[] grid, Ice.Current current__);

        void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, Ice.Current current__);

        void updateInventory(int inventory, Ice.Current current__);

        void stopAndGo(bool stopped, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BotToBaseOperationsNC_
    {
        void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu);

        void updateObstacleGrid(long[] grid);

        void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent);

        void updateInventory(int inventory);

        void stopAndGo(bool stopped);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BaseToBotOperations_
    {
        void ping(Ice.Current current__);

        void playSound(R2D2.Sound snd, Ice.Current current__);

        void move(int lSpeed, int rSpeed, Ice.Current current__);

        void rotateHead(int angle, Ice.Current current__);

        void setFlapState(R2D2.FlapState state, Ice.Current current__);

        void shutdown(Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BaseToBotOperationsNC_
    {
        void ping();

        void playSound(R2D2.Sound snd);

        void move(int lSpeed, int rSpeed);

        void rotateHead(int angle);

        void setFlapState(R2D2.FlapState state);

        void shutdown();
    }
}

namespace R2D2
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class ObstacleListHelper
    {
        public static void write(IceInternal.BasicStream os__, R2D2.Obstacle[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    v__[ix__].write__(os__);
                }
            }
        }

        public static R2D2.Obstacle[] read(IceInternal.BasicStream is__)
        {
            R2D2.Obstacle[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(12);
                v__ = new R2D2.Obstacle[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class ObstacleGridHelper
    {
        public static void write(IceInternal.BasicStream os__, long[] v__)
        {
            os__.writeLongSeq(v__);
        }

        public static long[] read(IceInternal.BasicStream is__)
        {
            long[] v__;
            v__ = is__.readLongSeq();
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BotToBasePrxHelper : Ice.ObjectPrxHelperBase, BotToBasePrx
    {
        #region Synchronous operations

        public void stopAndGo(bool stopped)
        {
            stopAndGo(stopped, null, false);
        }

        public void stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            stopAndGo(stopped, context__, true);
        }

        private void stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __stopAndGo_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BotToBaseDel_ del__ = (BotToBaseDel_)delBase__;
                        del__.stopAndGo(stopped, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu)
        {
            updateBotPosition(enc, imu, null, false);
        }

        public void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            updateBotPosition(enc, imu, context__, true);
        }

        private void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __updateBotPosition_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BotToBaseDel_ del__ = (BotToBaseDel_)delBase__;
                        del__.updateBotPosition(enc, imu, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void updateInventory(int inventory)
        {
            updateInventory(inventory, null, false);
        }

        public void updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            updateInventory(inventory, context__, true);
        }

        private void updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __updateInventory_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BotToBaseDel_ del__ = (BotToBaseDel_)delBase__;
                        del__.updateInventory(inventory, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void updateObstacleGrid(long[] grid)
        {
            updateObstacleGrid(grid, null, false);
        }

        public void updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            updateObstacleGrid(grid, context__, true);
        }

        private void updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __updateObstacleGrid_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BotToBaseDel_ del__ = (BotToBaseDel_)delBase__;
                        del__.updateObstacleGrid(grid, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent)
        {
            updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, null, false);
        }

        public void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, context__, true);
        }

        private void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __updatePowerStats_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BotToBaseDel_ del__ = (BotToBaseDel_)delBase__;
                        del__.updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<R2D2.Callback_BotToBase_stopAndGo> begin_stopAndGo(bool stopped)
        {
            return begin_stopAndGo(stopped, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_stopAndGo> begin_stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_stopAndGo(stopped, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_stopAndGo(bool stopped, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stopAndGo(stopped, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stopAndGo(stopped, ctx__, true, cb__, cookie__);
        }

        private const string __stopAndGo_name = "stopAndGo";

        public void end_stopAndGo(Ice.AsyncResult r__)
        {
            end__(r__, __stopAndGo_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BotToBase_stopAndGo> begin_stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_stopAndGo> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_stopAndGo>(this, __stopAndGo_name, stopAndGo_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__stopAndGo_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeBool(stopped);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void stopAndGo_completed__(R2D2.Callback_BotToBase_stopAndGo cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updateBotPosition> begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu)
        {
            return begin_updateBotPosition(enc, imu, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updateBotPosition> begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_updateBotPosition(enc, imu, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateBotPosition(enc, imu, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateBotPosition(enc, imu, ctx__, true, cb__, cookie__);
        }

        private const string __updateBotPosition_name = "updateBotPosition";

        public void end_updateBotPosition(Ice.AsyncResult r__)
        {
            end__(r__, __updateBotPosition_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BotToBase_updateBotPosition> begin_updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updateBotPosition> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updateBotPosition>(this, __updateBotPosition_name, updateBotPosition_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__updateBotPosition_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                enc.write__(os__);
                imu.write__(os__);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void updateBotPosition_completed__(R2D2.Callback_BotToBase_updateBotPosition cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updateInventory> begin_updateInventory(int inventory)
        {
            return begin_updateInventory(inventory, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updateInventory> begin_updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_updateInventory(inventory, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_updateInventory(int inventory, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateInventory(inventory, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateInventory(inventory, ctx__, true, cb__, cookie__);
        }

        private const string __updateInventory_name = "updateInventory";

        public void end_updateInventory(Ice.AsyncResult r__)
        {
            end__(r__, __updateInventory_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BotToBase_updateInventory> begin_updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updateInventory> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updateInventory>(this, __updateInventory_name, updateInventory_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__updateInventory_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(inventory);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void updateInventory_completed__(R2D2.Callback_BotToBase_updateInventory cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updateObstacleGrid> begin_updateObstacleGrid(long[] grid)
        {
            return begin_updateObstacleGrid(grid, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updateObstacleGrid> begin_updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_updateObstacleGrid(grid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_updateObstacleGrid(long[] grid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateObstacleGrid(grid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateObstacleGrid(grid, ctx__, true, cb__, cookie__);
        }

        private const string __updateObstacleGrid_name = "updateObstacleGrid";

        public void end_updateObstacleGrid(Ice.AsyncResult r__)
        {
            end__(r__, __updateObstacleGrid_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BotToBase_updateObstacleGrid> begin_updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updateObstacleGrid> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updateObstacleGrid>(this, __updateObstacleGrid_name, updateObstacleGrid_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__updateObstacleGrid_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                R2D2.ObstacleGridHelper.write(os__, grid);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void updateObstacleGrid_completed__(R2D2.Callback_BotToBase_updateObstacleGrid cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updatePowerStats> begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent)
        {
            return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BotToBase_updatePowerStats> begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, ctx__, true, cb__, cookie__);
        }

        private const string __updatePowerStats_name = "updatePowerStats";

        public void end_updatePowerStats(Ice.AsyncResult r__)
        {
            end__(r__, __updatePowerStats_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BotToBase_updatePowerStats> begin_updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updatePowerStats> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BotToBase_updatePowerStats>(this, __updatePowerStats_name, updatePowerStats_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__updatePowerStats_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeFloat(batteryPercent);
                os__.writeFloat(voltage);
                os__.writeFloat(regulatedCurrent);
                os__.writeFloat(unregulatedCurrent);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void updatePowerStats_completed__(R2D2.Callback_BotToBase_updatePowerStats cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static BotToBasePrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BotToBasePrx r = b as BotToBasePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                BotToBasePrxHelper h = new BotToBasePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BotToBasePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            BotToBasePrx r = b as BotToBasePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                BotToBasePrxHelper h = new BotToBasePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BotToBasePrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    BotToBasePrxHelper h = new BotToBasePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BotToBasePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    BotToBasePrxHelper h = new BotToBasePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BotToBasePrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BotToBasePrx r = b as BotToBasePrx;
            if(r == null)
            {
                BotToBasePrxHelper h = new BotToBasePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BotToBasePrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            BotToBasePrxHelper h = new BotToBasePrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::R2D2::BotToBase"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new BotToBaseDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new BotToBaseDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, BotToBasePrx v__)
        {
            os__.writeProxy(v__);
        }

        public static BotToBasePrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                BotToBasePrxHelper result = new BotToBasePrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BaseToBotPrxHelper : Ice.ObjectPrxHelperBase, BaseToBotPrx
    {
        #region Synchronous operations

        public void move(int lSpeed, int rSpeed)
        {
            move(lSpeed, rSpeed, null, false);
        }

        public void move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            move(lSpeed, rSpeed, context__, true);
        }

        private void move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __move_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BaseToBotDel_ del__ = (BaseToBotDel_)delBase__;
                        del__.move(lSpeed, rSpeed, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void ping()
        {
            ping(null, false);
        }

        public void ping(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            ping(context__, true);
        }

        private void ping(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __ping_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BaseToBotDel_ del__ = (BaseToBotDel_)delBase__;
                        del__.ping(context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void playSound(R2D2.Sound snd)
        {
            playSound(snd, null, false);
        }

        public void playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            playSound(snd, context__, true);
        }

        private void playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __playSound_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BaseToBotDel_ del__ = (BaseToBotDel_)delBase__;
                        del__.playSound(snd, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void rotateHead(int angle)
        {
            rotateHead(angle, null, false);
        }

        public void rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            rotateHead(angle, context__, true);
        }

        private void rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __rotateHead_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BaseToBotDel_ del__ = (BaseToBotDel_)delBase__;
                        del__.rotateHead(angle, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void setFlapState(R2D2.FlapState state)
        {
            setFlapState(state, null, false);
        }

        public void setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setFlapState(state, context__, true);
        }

        private void setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __setFlapState_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BaseToBotDel_ del__ = (BaseToBotDel_)delBase__;
                        del__.setFlapState(state, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void shutdown()
        {
            shutdown(null, false);
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            shutdown(context__, true);
        }

        private void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __shutdown_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        BaseToBotDel_ del__ = (BaseToBotDel_)delBase__;
                        del__.shutdown(context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_move> begin_move(int lSpeed, int rSpeed)
        {
            return begin_move(lSpeed, rSpeed, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_move> begin_move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_move(lSpeed, rSpeed, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_move(int lSpeed, int rSpeed, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_move(lSpeed, rSpeed, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_move(lSpeed, rSpeed, ctx__, true, cb__, cookie__);
        }

        private const string __move_name = "move";

        public void end_move(Ice.AsyncResult r__)
        {
            end__(r__, __move_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BaseToBot_move> begin_move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_move> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_move>(this, __move_name, move_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__move_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(lSpeed);
                os__.writeInt(rSpeed);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void move_completed__(R2D2.Callback_BaseToBot_move cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_ping> begin_ping()
        {
            return begin_ping(null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_ping> begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_ping(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_ping(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ping(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ping(ctx__, true, cb__, cookie__);
        }

        private const string __ping_name = "ping";

        public void end_ping(Ice.AsyncResult r__)
        {
            end__(r__, __ping_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BaseToBot_ping> begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_ping> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_ping>(this, __ping_name, ping_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__ping_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void ping_completed__(R2D2.Callback_BaseToBot_ping cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_playSound> begin_playSound(R2D2.Sound snd)
        {
            return begin_playSound(snd, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_playSound> begin_playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_playSound(snd, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_playSound(R2D2.Sound snd, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_playSound(snd, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_playSound(snd, ctx__, true, cb__, cookie__);
        }

        private const string __playSound_name = "playSound";

        public void end_playSound(Ice.AsyncResult r__)
        {
            end__(r__, __playSound_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BaseToBot_playSound> begin_playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_playSound> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_playSound>(this, __playSound_name, playSound_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__playSound_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeEnum((int)snd, 6);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void playSound_completed__(R2D2.Callback_BaseToBot_playSound cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_rotateHead> begin_rotateHead(int angle)
        {
            return begin_rotateHead(angle, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_rotateHead> begin_rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_rotateHead(angle, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_rotateHead(int angle, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_rotateHead(angle, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_rotateHead(angle, ctx__, true, cb__, cookie__);
        }

        private const string __rotateHead_name = "rotateHead";

        public void end_rotateHead(Ice.AsyncResult r__)
        {
            end__(r__, __rotateHead_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BaseToBot_rotateHead> begin_rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_rotateHead> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_rotateHead>(this, __rotateHead_name, rotateHead_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__rotateHead_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(angle);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void rotateHead_completed__(R2D2.Callback_BaseToBot_rotateHead cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_setFlapState> begin_setFlapState(R2D2.FlapState state)
        {
            return begin_setFlapState(state, null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_setFlapState> begin_setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setFlapState(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setFlapState(R2D2.FlapState state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setFlapState(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setFlapState(state, ctx__, true, cb__, cookie__);
        }

        private const string __setFlapState_name = "setFlapState";

        public void end_setFlapState(Ice.AsyncResult r__)
        {
            end__(r__, __setFlapState_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BaseToBot_setFlapState> begin_setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_setFlapState> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_setFlapState>(this, __setFlapState_name, setFlapState_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setFlapState_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeEnum((int)state, 1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setFlapState_completed__(R2D2.Callback_BaseToBot_setFlapState cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_shutdown> begin_shutdown()
        {
            return begin_shutdown(null, false, null, null);
        }

        public Ice.AsyncResult<R2D2.Callback_BaseToBot_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_shutdown(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(ctx__, true, cb__, cookie__);
        }

        private const string __shutdown_name = "shutdown";

        public void end_shutdown(Ice.AsyncResult r__)
        {
            end__(r__, __shutdown_name);
        }

        private Ice.AsyncResult<R2D2.Callback_BaseToBot_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_shutdown> result__ = new IceInternal.OnewayOutgoingAsync<R2D2.Callback_BaseToBot_shutdown>(this, __shutdown_name, shutdown_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__shutdown_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void shutdown_completed__(R2D2.Callback_BaseToBot_shutdown cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static BaseToBotPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BaseToBotPrx r = b as BaseToBotPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                BaseToBotPrxHelper h = new BaseToBotPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BaseToBotPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            BaseToBotPrx r = b as BaseToBotPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                BaseToBotPrxHelper h = new BaseToBotPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BaseToBotPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    BaseToBotPrxHelper h = new BaseToBotPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BaseToBotPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    BaseToBotPrxHelper h = new BaseToBotPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BaseToBotPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BaseToBotPrx r = b as BaseToBotPrx;
            if(r == null)
            {
                BaseToBotPrxHelper h = new BaseToBotPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BaseToBotPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            BaseToBotPrxHelper h = new BaseToBotPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::R2D2::BaseToBot"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new BaseToBotDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new BaseToBotDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, BaseToBotPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static BaseToBotPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                BaseToBotPrxHelper result = new BaseToBotPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace R2D2
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BotToBaseDel_ : Ice.ObjectDel_
    {
        void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BaseToBotDel_ : Ice.ObjectDel_
    {
        void ping(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace R2D2
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BotToBaseDelM_ : Ice.ObjectDelM_, BotToBaseDel_
    {
        public void stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("stopAndGo", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeBool(stopped);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("updateBotPosition", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    enc.write__(os__);
                    imu.write__(os__);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("updateInventory", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(inventory);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("updateObstacleGrid", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    R2D2.ObstacleGridHelper.write(os__, grid);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("updatePowerStats", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeFloat(batteryPercent);
                    os__.writeFloat(voltage);
                    os__.writeFloat(regulatedCurrent);
                    os__.writeFloat(unregulatedCurrent);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BaseToBotDelM_ : Ice.ObjectDelM_, BaseToBotDel_
    {
        public void move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("move", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(lSpeed);
                    os__.writeInt(rSpeed);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void ping(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("ping", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("playSound", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeEnum((int)snd, 6);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("rotateHead", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(angle);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setFlapState", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeEnum((int)state, 1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("shutdown", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace R2D2
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BotToBaseDelD_ : Ice.ObjectDelD_, BotToBaseDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void stopAndGo(bool stopped, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "stopAndGo", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BotToBase servant__ = null;
                try
                {
                    servant__ = (BotToBase)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.stopAndGo(stopped, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "updateBotPosition", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BotToBase servant__ = null;
                try
                {
                    servant__ = (BotToBase)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.updateBotPosition(enc, imu, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void updateInventory(int inventory, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "updateInventory", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BotToBase servant__ = null;
                try
                {
                    servant__ = (BotToBase)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.updateInventory(inventory, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void updateObstacleGrid(long[] grid, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "updateObstacleGrid", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BotToBase servant__ = null;
                try
                {
                    servant__ = (BotToBase)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.updateObstacleGrid(grid, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "updatePowerStats", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BotToBase servant__ = null;
                try
                {
                    servant__ = (BotToBase)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BaseToBotDelD_ : Ice.ObjectDelD_, BaseToBotDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void move(int lSpeed, int rSpeed, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "move", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BaseToBot servant__ = null;
                try
                {
                    servant__ = (BaseToBot)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.move(lSpeed, rSpeed, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void ping(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "ping", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BaseToBot servant__ = null;
                try
                {
                    servant__ = (BaseToBot)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.ping(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void playSound(R2D2.Sound snd, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "playSound", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BaseToBot servant__ = null;
                try
                {
                    servant__ = (BaseToBot)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.playSound(snd, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void rotateHead(int angle, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "rotateHead", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BaseToBot servant__ = null;
                try
                {
                    servant__ = (BaseToBot)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.rotateHead(angle, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setFlapState(R2D2.FlapState state, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "setFlapState", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BaseToBot servant__ = null;
                try
                {
                    servant__ = (BaseToBot)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.setFlapState(state, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "shutdown", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BaseToBot servant__ = null;
                try
                {
                    servant__ = (BaseToBot)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.shutdown(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace R2D2
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class BotToBaseDisp_ : Ice.ObjectImpl, BotToBase
    {
        #region Slice operations

        public void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu)
        {
            updateBotPosition(enc, imu, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void updateBotPosition(R2D2.BotPosition enc, R2D2.BotPosition imu, Ice.Current current__);

        public void updateObstacleGrid(long[] grid)
        {
            updateObstacleGrid(grid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void updateObstacleGrid(long[] grid, Ice.Current current__);

        public void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent)
        {
            updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void updatePowerStats(float batteryPercent, float voltage, float regulatedCurrent, float unregulatedCurrent, Ice.Current current__);

        public void updateInventory(int inventory)
        {
            updateInventory(inventory, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void updateInventory(int inventory, Ice.Current current__);

        public void stopAndGo(bool stopped)
        {
            stopAndGo(stopped, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void stopAndGo(bool stopped, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::R2D2::BotToBase"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus updateBotPosition___(BotToBase obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            R2D2.BotPosition enc;
            enc = new R2D2.BotPosition();
            R2D2.BotPosition imu;
            imu = new R2D2.BotPosition();
            enc.read__(is__);
            imu.read__(is__);
            inS__.endReadParams();
            obj__.updateBotPosition(enc, imu, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus updateObstacleGrid___(BotToBase obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            long[] grid;
            grid = R2D2.ObstacleGridHelper.read(is__);
            inS__.endReadParams();
            obj__.updateObstacleGrid(grid, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus updatePowerStats___(BotToBase obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            float batteryPercent;
            float voltage;
            float regulatedCurrent;
            float unregulatedCurrent;
            batteryPercent = is__.readFloat();
            voltage = is__.readFloat();
            regulatedCurrent = is__.readFloat();
            unregulatedCurrent = is__.readFloat();
            inS__.endReadParams();
            obj__.updatePowerStats(batteryPercent, voltage, regulatedCurrent, unregulatedCurrent, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus updateInventory___(BotToBase obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            int inventory;
            inventory = is__.readInt();
            inS__.endReadParams();
            obj__.updateInventory(inventory, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus stopAndGo___(BotToBase obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            bool stopped;
            stopped = is__.readBool();
            inS__.endReadParams();
            obj__.stopAndGo(stopped, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "stopAndGo",
            "updateBotPosition",
            "updateInventory",
            "updateObstacleGrid",
            "updatePowerStats"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 4:
                {
                    return stopAndGo___(this, inS__, current__);
                }
                case 5:
                {
                    return updateBotPosition___(this, inS__, current__);
                }
                case 6:
                {
                    return updateInventory___(this, inS__, current__);
                }
                case 7:
                {
                    return updateObstacleGrid___(this, inS__, current__);
                }
                case 8:
                {
                    return updatePowerStats___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class BaseToBotDisp_ : Ice.ObjectImpl, BaseToBot
    {
        #region Slice operations

        public void ping()
        {
            ping(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void ping(Ice.Current current__);

        public void playSound(R2D2.Sound snd)
        {
            playSound(snd, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void playSound(R2D2.Sound snd, Ice.Current current__);

        public void move(int lSpeed, int rSpeed)
        {
            move(lSpeed, rSpeed, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void move(int lSpeed, int rSpeed, Ice.Current current__);

        public void rotateHead(int angle)
        {
            rotateHead(angle, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void rotateHead(int angle, Ice.Current current__);

        public void setFlapState(R2D2.FlapState state)
        {
            setFlapState(state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setFlapState(R2D2.FlapState state, Ice.Current current__);

        public void shutdown()
        {
            shutdown(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void shutdown(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::R2D2::BaseToBot"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus ping___(BaseToBot obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            obj__.ping(current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus playSound___(BaseToBot obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            R2D2.Sound snd;
            snd = (R2D2.Sound)is__.readEnum(6);
            inS__.endReadParams();
            obj__.playSound(snd, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus move___(BaseToBot obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            int lSpeed;
            int rSpeed;
            lSpeed = is__.readInt();
            rSpeed = is__.readInt();
            inS__.endReadParams();
            obj__.move(lSpeed, rSpeed, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus rotateHead___(BaseToBot obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            int angle;
            angle = is__.readInt();
            inS__.endReadParams();
            obj__.rotateHead(angle, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setFlapState___(BaseToBot obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            R2D2.FlapState state;
            state = (R2D2.FlapState)is__.readEnum(1);
            inS__.endReadParams();
            obj__.setFlapState(state, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus shutdown___(BaseToBot obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            obj__.shutdown(current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "move",
            "ping",
            "playSound",
            "rotateHead",
            "setFlapState",
            "shutdown"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 4:
                {
                    return move___(this, inS__, current__);
                }
                case 5:
                {
                    return ping___(this, inS__, current__);
                }
                case 6:
                {
                    return playSound___(this, inS__, current__);
                }
                case 7:
                {
                    return rotateHead___(this, inS__, current__);
                }
                case 8:
                {
                    return setFlapState___(this, inS__, current__);
                }
                case 9:
                {
                    return shutdown___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
